package com.kodlamaio.InventoryService.business.concretes;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;
import org.springframework.ui.Model;

import com.kodlamaio.InventoryService.business.abstracts.ModelService;
import com.kodlamaio.InventoryService.business.requests.create.CreateCarRequest;
import com.kodlamaio.InventoryService.business.requests.create.CreateModelRequest;
import com.kodlamaio.InventoryService.business.responses.create.CreateBrandResponse;
import com.kodlamaio.InventoryService.business.responses.create.CreateModelResponse;
import com.kodlamaio.InventoryService.business.responses.get.GetAllBrandsResponse;
import com.kodlamaio.InventoryService.business.responses.get.GetAllModelsResponse;
import com.kodlamaio.InventoryService.business.responses.get.GetModelResponse;
import com.kodlamaio.InventoryService.business.responses.update.UpdateModelResponse;
import com.kodlamaio.InventoryService.dataAccess.ModelRepository;
import com.kodlamaio.InventoryService.entities.Brand;
import com.kodlamaio.common.utilities.exceptions.BusinessException;
import com.kodlamaio.common.utilities.mapping.ModelMapperManager;
import com.kodlamaio.common.utilities.mapping.ModelMapperService;
@Service
public class ModelManager implements ModelService {

	private ModelRepository modelRepository;
	private ModelMapperService modelMapperService;
	@Override
	public List<GetAllModelsResponse> getAll() {
		List<Model> models=this.modelRepository.findAll();
		List<GetAllModelsResponse> response = 
				models.stream().map(brand->this.modelMapperService.forResponse()
						.map(brand, GetAllModelsResponse.class)).collect(Collectors.toList());
		return response;
		
	}

	@Override
	public CreateModelResponse add(CreateModelRequest createModelRequest) {
		checkIfModelExistsByName(createModelRequest.getName());
		Model model= this.modelMapperService.forRequest().map(createModelRequest, Model.class);
		model.setId(UUID.randomUUID().toString());
		this.modelRepository.save(model);
		
		CreateModelResponse createModelResponse = this.modelMapperService.forResponse().map(model, CreateModelResponse.class);
		return createModelResponse;
		
	}
	private void checkIfModelExistsByName(String name) {
		Model model = this.modelRepository.findByName(name);
		if(model!=null) {
		    throw new BusinessException("BRAND.EXISTS");
	}
		
	}

	

}
